ui_css_generation:
  description: >
    Generate the HTML and CSS structure for the game UI based on {input_path} and {template_path}.
    - Include a canvas (#gameCanvas) and a card panel (#cardContainer) inside the layout.
    - Ensure card panel does not overflow outside the canvas boundaries.
    - Apply mobile-responsive design techniques.
    - Prepare the code to be inserted into an existing template without breaking structure.
    - Clearly mark the output with <!-- UI/CSS Code Segment -->.
  expected_output: >
    HTML and CSS snippet labeled "UI/CSS Code Segment".

game_logic_generation:
  description: >
    Build a GameLogic class based on gameplay details from {input_path}.
    - Dynamically set up the canvas and map grid.
    - Implement core mechanics: player movement, guard patrols, item pickups, win/loss detection.
    - Integrate stealth and card power effects (Dash, Stealth, Disable).
    - Follow {template_path} for compatibility.
    - Mark your code as // JavaScript Logic Segment.
  expected_output: >
    JavaScript class implementing core gameplay logic, labeled "JavaScript Logic Segment".

user_input_generation:
  description: >
    Generate user input handling code based on control requirements from {input_path}.
    - Capture movement inputs (Arrow keys + WASD).
    - Capture touch gestures for mobile support.
    - Attach event listeners for Play, Restart, Settings, and Instructions buttons.
    - **If UI and Logic are separate, define a Game controller class that:**
      * Instantiates UI and Logic classes.
      * Connects button actions to game transitions.
      * Ensures Play button correctly starts the game.
    - Without this, navigation will break â€” prioritize correct wiring.
    - Label your output as // User Input Segment.
  expected_output: >
    JavaScript for user inputs + Game controller class, labeled "User Input Segment".

generate_image_assets:
  description: >
    Generate pixel-art and futuristic neon-style images for Bank Heist - Cards Edition based on {input_path}.
    - Use DallE or other image generation tools.
    - Save all images under images/ folder.
    - After saving images:
      * Create a manifest JSON file formatted as assets under which each filename and url is present
    - Ensure no extra metadata (only filename and url).
    - Save the manifest as images/manifest.json.
  expected_output: >
    - All generated images saved under images/.
    - A manifest.json listing assets with filename and URL format.
  agent: image_assets_agent

generate_audio_assets:
  description: >
    Generate stealth-themed background music and card sound effects based on {input_path}.
    - Save all audio files under sounds/ folder.
    - Create a manifest JSON file formatted as assets under which each filename and url is present
    - No extra metadata (only filename and url).
    - Save the manifest as sounds/manifest.json.
  expected_output: >
    - All generated sounds saved under sounds/.
    - A manifest.json listing sounds with filename and URL.
  agent: audio_assets_agent


integrate_assets:
  description: >
    Read the generated image and audio manifests.
    - Embed <img> and <audio> tags into {template_path}.
    - Update CSS backgrounds and JavaScript preload calls correctly.
    - Ensure that all asset paths are correctly referenced in the final game file.
    - Label code inserted as <!-- Asset Integration Code Segment -->.
  expected_output: >
    Updated HTML/CSS/JS snippets with embedded assets.
  agent: asset_integrator_agent

template_integration:
  description: >
    Merge the generated code pieces into {template_path}.
    - Insert:
      * UI/CSS Code Segment at [[UI_CSS]]
      * JavaScript Logic + User Input + Asset Integration at [[JS_CODE]]
    - Preserve all other template structure.
    - Verify:
      * Play, Reset, Settings, Instructions buttons work.
      * Game class connects UI and Logic correctly.
    - Mark final output as <!-- Integrated HTML File -->.
  expected_output: >
    Fully merged HTML file ready for gameplay.

testing_and_debugging:
  description: >
    Thoroughly test the integrated HTML file.
    - Verify that canvas, card panel, and assets render properly.
    - Confirm button functionalities (Play, Restart, Settings, Instructions).
    - Confirm that a Game controller class exists.
    - Simulate player/guard interactions and card activations.
    - Document any functional bugs and recommend fixes.
  expected_output: >
    Fully functional final HTML file labeled <!-- Final HTML Output -->.

final_output:
  description: >
    Package the final deliverables:
    - Create an output/ directory.
      * output/images (copy all images)
      * output/sounds (copy all sounds)
      * output/game.html (final playable HTML)
    - Print the final output tree.
    - Confirm again that Play, Restart, Settings, Instructions buttons are functional, and Game class is present.
  expected_output: >
    Tree view of output/ containing images/, sounds/, and game.html.
  agent: template_integrator_agent

final_html_building:
  description: >
    Compile and write the final HTML output.
    - Merge UI, Logic, Input Handling, and Asset Integration segments into one HTML file.
    - Ensure Play, Restart, Settings, and Instructions work as intended.
    - Save it under output/game.html.
    - Game controller class should properly orchestrate UI and Logic layers.
  expected_output: >
    Complete and fully playable HTML file stored under output/game.html.
  agent: final_html_builder_agent
