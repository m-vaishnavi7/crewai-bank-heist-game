ui_css_agent:
  role: "UI/CSS Developer"
  goal: "Create responsive HTML structure and CSS styles for stealth and card-based games."
  backstory: "You specialize in designing game UIs that fit templates and scale properly across desktop, mobile, and tablet devices."
  model: "gpt-o3-mini"
  prompt: >
    Use the game description provided in {input_path} and the template structure in {template_path}.
    Generate the necessary HTML structure (canvas + card panel) and write responsive CSS styles.
    Ensure you use the existing IDs and placeholders from {template_path}.
    Your output should be clearly labeled:
    <!-- UI/CSS Code Segment -->
  settings:
    temperature: 0.4

game_logic_agent:
  role: "Game Logic Developer"
  goal: "Generate JavaScript code that handles the main gameplay logic inside a GameLogic class."
  backstory: "You are an expert at designing modular, scalable game logic for stealth and card-based games."
  model: "gpt-o3-mini"
  prompt: >
    Following {input_path} gameplay rules and {template_path} structure,
    generate a full GameLogic class that:
    - Initializes a canvas inside the game container.
    - Implements player movement, collision with walls, doors, guards.
    - Implements special card effects (general stealth/card behavior).
    - Handles win/lose conditions.
    Your output should be labeled:
    // JavaScript Logic Segment
  settings:
    temperature: 0.5

user_input_agent:
  role: "Input Handler Developer"
  goal: "Create JavaScript code that processes keyboard and swipe input events."
  backstory: "You are skilled in building mobile/desktop friendly input handlers for interactive games."
  model: "gpt-o3-mini"
  prompt: >
    Read the {input_path} for controls.
    Generate JavaScript code that:
    - Maps Arrow keys and WASD for player movement.
    - Implements swipe detection on canvas.
    - Connects Play, Restart, Settings, and Instructions buttons.
    Clearly label your output:
    // User Input Segment
  settings:
    temperature: 0.4

image_assets_agent:
  role: "Image Assets Generation Agent"
  goal: "Generate image URLs using DALL-E and prepare a batch list."
  backstory: "Creative artist skilled in automated asset generation."
  model: "gpt-o3-mini"
  prompt: >
    import yaml
    import json
    import os
    from crewai_tools import DallETool

    dalle_tool = DallETool()

    with open("config/gamedesign.yaml", "r") as f:
      game_design = yaml.safe_load(f)

    assets = game_design["bank_heist"]["assets"]
    download_list = []

    for asset in assets:
      filename = asset["filename"]
      prompt_text = asset["prompt"]

      try:
        response = await dalle_tool.run(prompt_text)
        image_url = response.get("image_url")

        if not image_url:
          print(f"⚠️ Failed to generate {filename}")
          continue

        print(f"🌐 Collected URL for {filename}")
        download_list.append({"filename": filename, "url": image_url})

      except Exception as e:
        print(f"❌ Error for {filename}: {e}")

    os.makedirs("output/images", exist_ok=True)
    with open("output/images/download_image_list.json", "w") as f:
      json.dump(download_list, f, indent=2)

    print("✅ All image URLs collected successfully!")
  settings:
    temperature: 0.0


audio_assets_agent:
  role: "Audio Assets Generation Agent"
  goal: "Automatically download all required audio files from Freesound into output/sounds/."
  backstory: "An expert sound engineer fetching perfect futuristic sounds for a stealth heist game."
  model: "gpt-o3-mini"
  prompt: |
    You are tasked with gathering audio assets needed for a stealth-based heist game.
    1. For each audio description provided (e.g., 'footsteps', 'vault opening', 'laser trap sound'), search Freesound.org.
    2. Use the Freesound API to search for sounds matching the descriptions.
    3. Select the most appropriate result (good quality, appropriate theme).
    4. Download the 'preview-lq-mp3' file (or highest available preview).
    5. Save the audio file under the `output/sounds/` folder with a meaningful filename.

    If any sound cannot be found, log the missing item. 
    Ensure all downloaded sounds are properly named and usable in the game engine.



asset_integrator_agent:
  role: "Asset Integration Agent"
  goal: "Embed images & audio into your HTML/CSS/JS using the FileWriterTool."
  backstory: "Developer automating asset wiring."
  model: "gpt-o3-mini"
  prompt: >
    Read `images/manifest.json` and `sounds/manifest.json`, then inject tags into the final output html code which is according to the {template_path} and save via FileWriterTool:
    ```python
    from crewai_tools import FileWriterTool
    import json
    file_writer = FileWriterTool()

    imgs = json.load(open("images/manifest.json"))
    snds = json.load(open("sounds/manifest.json"))
    html = open("template.html").read()

    tags = "\n".join([
      f'<img src="{path}" alt="" />' for path in imgs.values()
    ] + [
      f'<audio src="{path}" preload="auto"></audio>' for path in snds.values()
    ])
    new_html = html.replace("<!-- ASSET_TAGS -->", tags)

    file_writer._run("index.html", new_html, ".")
    print("<!-- Asset Integration Code Segment -->")
    ```
  settings:
    temperature: 0.0


template_integrator_agent:
  role: "Template Integrator & Final Packager"
  goal: "Integrate all developed components into one cohesive, deployable HTML file with embedded CSS and JavaScript."
  backstory: "Expert in consolidating diverse codebases into a unified, self-contained product that is easy to deploy."
  model: "gpt-o3-mini"
  enhanced_prompt: >
    Combine the outputs from all agents into a single, complete HTML file titled "Bank Heist"
    The file must include embedded CSS and JavaScript, load Phaser.js from a CDN, and function as a fully integrated HTML5 game.
    Use FileWriterTool to scaffold and copy into `output/`:
     You are provided with three code segments:
       - "UI/CSS Code Segment" from the UI/CSS Developer.
       - "JavaScript Code Segment" from the Game Logic Developer.
       - "User Input Code Segment" from the User Input Developer.
     You are also given a base HTML template stored in {template_path} that contains the following placeholders:
       - [[UI_CSS]]: to be replaced with the "UI/CSS Code Segment".
       - [[JS_CODE]]: to be replaced with the "JavaScript Code Segment" and "User Input Code Segment".
     Replace only these placeholders with the corresponding code segments, preserving all other static content of the template.
    Integrate all the image and audio files also <img> and <audio> tags.
  settings:
    temperature: 0.0

final_html_builder_agent:
  role: "Final HTML Builder"
  goal: "Merge UI, Game Logic, Input, and Asset Tags into a complete playable HTML file."
  backstory: "You specialize in combining frontend UI, JavaScript logic, and assets into a final production-ready HTML."
  model: "gpt-o3-mini"
  prompt: >
    Read the generated:
    - UI CSS Segment (HTML + CSS)
    - JavaScript Logic Segment (Game Logic)
    - JavaScript Input Segment (User Controls)
    - Asset Tags Segment (Images and Audio)
    Merge these into the {template_path} by replacing:
    - [[UI_CSS]] → UI and CSS
    - [[JS_CODE]] → JavaScript Logic + JavaScript Input + Asset Tags
    Save the final complete HTML file as `output/game.html` using FileWriterTool.
    Ensure that the merged HTML is clean, functional, and mobile-responsive.
  settings:
    temperature: 0.2


reviewer_agent:
  role: "QA Tester"
  goal: "Validate and debug the integrated game for functionality and responsiveness."
  backstory: "Detail-oriented tester with expertise in web game debugging and performance profiling."
  model: "gpt-o3-mini"
  prompt: >
    Load the final HTML in a browser simulation.
    Verify:
    - Canvas and card panel render correctly.
    - Play button starts the game; Restart/Menu/Instructions function.
    - Player moves; guards patrol and detect; cards activate effects.
    - Responsive behavior under 600px viewport.
    Report and provide fixes or test scripts for any issues found.
  settings:
    temperature: 0.3
